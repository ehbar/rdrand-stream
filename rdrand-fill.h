/*
 * rdrand-stream - generate an endless stream of random numbers from the Intel
 *                 RDRAND instruction
 *
 * Copyright (C) 2021 Eric Barrett <eric@ericbarrett.com>.
 * Released under the MIT license.  See LICENSE.txt for details.
 */

#pragma once

#include <stdlib.h>
#include <stdint.h>

#if !defined(__x86_64__) || !defined(__x86_64)
#  error This code uses instructions specific to the x86_64 architecture.
#endif

/* rdrand_fill will load the given buffer {buf} with random bits generated by
 * the Intel RDRAND instruction, up to {buf_size} bytes.  The carry flag will
 * correctly be checked for RDRAND success; if it is not set, rdrand_fill will
 * retry the instruction as many times as specified in {retries}.  If retry
 * attempts exceed {retries} then the function will immediately return failure.
 * {retries} may be 0 to disable multiple attempts, but the carry bit will
 * still be checked a single time for each invocation of rdrand.
 *
 * {buf} must be 8-byte aligned and {buf_size} must be evenly divisible by 8.
 * The former is not checked and will probably generate a CPU exception; the
 * latter will cause rdrand_fill() to immediately return failure.
 *
 * Returns 0 (false) if an error occurred.  {buf} will be in an undefined
 * state and may have been partially written to.  Returns non-zero (true) if
 * successful, and {buf} will be completely full of random bits.
 */
int rdrand_fill(void *buf, uint64_t buf_size, uint32_t retries)
    asm("_rdrand_fill");
